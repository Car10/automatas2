/* Generated By:JavaCC: Do not edit this line. Python.java */
package javacc;
import java.util.ArrayList;

public class Python implements PythonConstants {

 public String ex;
public static ArrayList<String> tabletokens = new ArrayList();
        void error(String e){
            ex = e;
            System.out.println(ex);
        }

  final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case NONE:
      case AND:
      case AS:
      case ASSERT:
      case BREAK:
      case CLASS:
      case CONTINUE:
      case DEF:
      case DEL:
      case ELIF:
      case ELSE:
      case EXCEPT:
      case FINALLY:
      case FOR:
      case FROM:
      case GLOBAL:
      case IF:
      case IMPORT:
      case IN:
      case IS:
      case LAMBDA:
      case NONLOCAL:
      case NOT:
      case OR:
      case PASS:
      case RAISE:
      case RETURN:
      case TRY:
      case WHILE:
      case WITH:
      case YIELD:
      case RANGE:
      case INPUT:
      case PRINT:
      case VERROR:
      case START:
      case END:
      case SUMA:
      case RESTA:
      case MULTI:
      case POTENCIA:
      case DIVISION:
      case DIVENTERA:
      case MODULO:
      case RECIZQUIERDA:
      case RECDERECHA:
      case AMPERSON:
      case PIPE:
      case CONJUNTO:
      case OPNOT:
      case MENORQUE:
      case MAYORQUE:
      case MENORIGUAL:
      case MAYORIGUAL:
      case IGUALIGUAL:
      case NOTNEG:
      case PARENI:
      case PAREND:
      case PUNTO:
      case CORCHI:
      case CORCHD:
      case LLAVEI:
      case LLAVED:
      case COMA:
      case DOSPUNTOS:
      case PUNTOCOMA:
      case IGUAL:
      case FLECHITA:
      case MASIGUAL:
      case MENOSIGUAL:
      case DIVIGUAL:
      case MULTIGUAL:
      case DDIGUAL:
      case RESIGUAL:
      case ARROBAIGUAL:
      case AMPIGUAL:
      case ORIGUAL:
      case EXIGUAL:
      case MDMDIGUAL:
      case MIMIIGUAL:
      case ASASIGUAL:
      case PESOS:
      case SIGNOINT:
      case ACENTOINV:
      case ENTERO:
      case FLOTANTE:
      case CADENA:
      case CARACTER:
      case BOLEANO:
      case COMILLAS:
      case COMENTARIO:
      case DIGITOS:
      case IDENTIFICADOR1:
      case IDENTIFICADOR2:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case NONE:
        jj_consume_token(NONE);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case AS:
        jj_consume_token(AS);
        break;
      case ASSERT:
        jj_consume_token(ASSERT);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        break;
      case DEF:
        jj_consume_token(DEF);
        break;
      case DEL:
        jj_consume_token(DEL);
        break;
      case ELIF:
        jj_consume_token(ELIF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case EXCEPT:
        jj_consume_token(EXCEPT);
        break;
      case FINALLY:
        jj_consume_token(FINALLY);
        break;
      case FOR:
        jj_consume_token(FOR);
        break;
      case FROM:
        jj_consume_token(FROM);
        break;
      case GLOBAL:
        jj_consume_token(GLOBAL);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case IMPORT:
        jj_consume_token(IMPORT);
        break;
      case IN:
        jj_consume_token(IN);
        break;
      case IS:
        jj_consume_token(IS);
        break;
      case LAMBDA:
        jj_consume_token(LAMBDA);
        break;
      case NONLOCAL:
        jj_consume_token(NONLOCAL);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case PASS:
        jj_consume_token(PASS);
        break;
      case RAISE:
        jj_consume_token(RAISE);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        break;
      case TRY:
        jj_consume_token(TRY);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        break;
      case WITH:
        jj_consume_token(WITH);
        break;
      case YIELD:
        jj_consume_token(YIELD);
        break;
      case RANGE:
        jj_consume_token(RANGE);
        break;
      case INPUT:
        jj_consume_token(INPUT);
        break;
      case PRINT:
        jj_consume_token(PRINT);
        break;
      case VERROR:
        jj_consume_token(VERROR);
        break;
      case START:
        jj_consume_token(START);
        break;
      case END:
        jj_consume_token(END);
        break;
      case SUMA:
        jj_consume_token(SUMA);
        break;
      case RESTA:
        jj_consume_token(RESTA);
        break;
      case MULTI:
        jj_consume_token(MULTI);
        break;
      case POTENCIA:
        jj_consume_token(POTENCIA);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        break;
      case DIVENTERA:
        jj_consume_token(DIVENTERA);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      case RECIZQUIERDA:
        jj_consume_token(RECIZQUIERDA);
        break;
      case RECDERECHA:
        jj_consume_token(RECDERECHA);
        break;
      case AMPERSON:
        jj_consume_token(AMPERSON);
        break;
      case PIPE:
        jj_consume_token(PIPE);
        break;
      case CONJUNTO:
        jj_consume_token(CONJUNTO);
        break;
      case OPNOT:
        jj_consume_token(OPNOT);
        break;
      case MENORQUE:
        jj_consume_token(MENORQUE);
        break;
      case MAYORQUE:
        jj_consume_token(MAYORQUE);
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        break;
      case MAYORIGUAL:
        jj_consume_token(MAYORIGUAL);
        break;
      case IGUALIGUAL:
        jj_consume_token(IGUALIGUAL);
        break;
      case NOTNEG:
        jj_consume_token(NOTNEG);
        break;
      case PARENI:
        jj_consume_token(PARENI);
        break;
      case PAREND:
        jj_consume_token(PAREND);
        break;
      case PUNTO:
        jj_consume_token(PUNTO);
        break;
      case CORCHI:
        jj_consume_token(CORCHI);
        break;
      case CORCHD:
        jj_consume_token(CORCHD);
        break;
      case LLAVEI:
        jj_consume_token(LLAVEI);
        break;
      case LLAVED:
        jj_consume_token(LLAVED);
        break;
      case COMA:
        jj_consume_token(COMA);
        break;
      case DOSPUNTOS:
        jj_consume_token(DOSPUNTOS);
        break;
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      case FLECHITA:
        jj_consume_token(FLECHITA);
        break;
      case MASIGUAL:
        jj_consume_token(MASIGUAL);
        break;
      case MENOSIGUAL:
        jj_consume_token(MENOSIGUAL);
        break;
      case DIVIGUAL:
        jj_consume_token(DIVIGUAL);
        break;
      case MULTIGUAL:
        jj_consume_token(MULTIGUAL);
        break;
      case DDIGUAL:
        jj_consume_token(DDIGUAL);
        break;
      case RESIGUAL:
        jj_consume_token(RESIGUAL);
        break;
      case ARROBAIGUAL:
        jj_consume_token(ARROBAIGUAL);
        break;
      case AMPIGUAL:
        jj_consume_token(AMPIGUAL);
        break;
      case ORIGUAL:
        jj_consume_token(ORIGUAL);
        break;
      case EXIGUAL:
        jj_consume_token(EXIGUAL);
        break;
      case MDMDIGUAL:
        jj_consume_token(MDMDIGUAL);
        break;
      case MIMIIGUAL:
        jj_consume_token(MIMIIGUAL);
        break;
      case ASASIGUAL:
        jj_consume_token(ASASIGUAL);
        break;
      case PESOS:
        jj_consume_token(PESOS);
        break;
      case SIGNOINT:
        jj_consume_token(SIGNOINT);
        break;
      case ACENTOINV:
        jj_consume_token(ACENTOINV);
        break;
      case ENTERO:
        jj_consume_token(ENTERO);
        break;
      case FLOTANTE:
        jj_consume_token(FLOTANTE);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      case CARACTER:
        jj_consume_token(CARACTER);
        break;
      case BOLEANO:
        jj_consume_token(BOLEANO);
        break;
      case COMILLAS:
        jj_consume_token(COMILLAS);
        break;
      case COMENTARIO:
        jj_consume_token(COMENTARIO);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      case IDENTIFICADOR1:
        jj_consume_token(IDENTIFICADOR1);
        break;
      case IDENTIFICADOR2:
        jj_consume_token(IDENTIFICADOR2);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void programa() throws ParseException {
    jj_consume_token(START);
    principal();
    jj_consume_token(END);
    jj_consume_token(0);
  }

  final public void principal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLAS:
    case COMENTARIO:
      comentario();
      break;
    case DIGITOS:
      calculadora();
      break;
    case PASS:
      fpass();
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_1(3)) {
        leer();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRINT:
          imprimir();
          break;
        case BREAK:
          romper();
          break;
        default:
          jj_la1[3] = jj_gen;
          if (jj_2_2(2)) {
            declararvar();
          } else if (jj_2_3(2)) {
            asignacionaumentada();
          } else {
        {if (true) return;}
          }
        }
      }
    }
  }

  final public void comentario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMENTARIO:
      jj_consume_token(COMENTARIO);
      jj_consume_token(IDENTIFICADOR2);
      jj_consume_token(COMENTARIO);
      break;
    case COMILLAS:
      jj_consume_token(COMILLAS);
      jj_consume_token(COMILLAS);
      jj_consume_token(COMILLAS);
      jj_consume_token(IDENTIFICADOR2);
      jj_consume_token(COMILLAS);
      jj_consume_token(COMILLAS);
      jj_consume_token(COMILLAS);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void calculadora() throws ParseException {
    jj_consume_token(DIGITOS);
    operadorcalculadora();
    jj_consume_token(DIGITOS);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTI:
      case POTENCIA:
      case DIVISION:
      case MODULO:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      operadorcalculadora();
      jj_consume_token(DIGITOS);
    }
    jj_consume_token(PUNTOCOMA);
  }

  final public void operadorcalculadora() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case MULTI:
      jj_consume_token(MULTI);
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
      break;
    case POTENCIA:
      jj_consume_token(POTENCIA);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fpass() throws ParseException {
    jj_consume_token(PASS);
    jj_consume_token(PUNTOCOMA);
  }

  final public void imprimir() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(PARENI);
    opcimprimir();
    jj_consume_token(PAREND);
    jj_consume_token(PUNTOCOMA);
  }

  final public void opcimprimir() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLAS:
      jj_consume_token(COMILLAS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR2:
        jj_consume_token(IDENTIFICADOR2);
        break;
      case IDENTIFICADOR1:
        jj_consume_token(IDENTIFICADOR1);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMILLAS);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
        case DIGITOS:
        case IDENTIFICADOR1:
        case IDENTIFICADOR2:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          jj_consume_token(COMILLAS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR2:
            jj_consume_token(IDENTIFICADOR2);
            break;
          case IDENTIFICADOR1:
            jj_consume_token(IDENTIFICADOR1);
            break;
          case DIGITOS:
            jj_consume_token(DIGITOS);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(COMILLAS);
          break;
        case DIGITOS:
        case IDENTIFICADOR1:
        case IDENTIFICADOR2:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR2:
            jj_consume_token(IDENTIFICADOR2);
            break;
          case IDENTIFICADOR1:
            jj_consume_token(IDENTIFICADOR1);
            break;
          case DIGITOS:
            jj_consume_token(DIGITOS);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(COMILLAS);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case DIGITOS:
    case IDENTIFICADOR1:
    case IDENTIFICADOR2:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR1:
        jj_consume_token(IDENTIFICADOR1);
        break;
      case IDENTIFICADOR2:
        jj_consume_token(IDENTIFICADOR2);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
        case DIGITOS:
        case IDENTIFICADOR1:
        case IDENTIFICADOR2:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          jj_consume_token(COMILLAS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR2:
            jj_consume_token(IDENTIFICADOR2);
            break;
          case IDENTIFICADOR1:
            jj_consume_token(IDENTIFICADOR1);
            break;
          case DIGITOS:
            jj_consume_token(DIGITOS);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(COMILLAS);
          break;
        case DIGITOS:
        case IDENTIFICADOR1:
        case IDENTIFICADOR2:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR2:
            jj_consume_token(IDENTIFICADOR2);
            break;
          case IDENTIFICADOR1:
            jj_consume_token(IDENTIFICADOR1);
            break;
          case DIGITOS:
            jj_consume_token(DIGITOS);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(COMILLAS);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void leer() throws ParseException {
    jj_consume_token(IDENTIFICADOR1);
    jj_consume_token(IGUAL);
    jj_consume_token(INPUT);
    jj_consume_token(PARENI);
    jj_consume_token(COMILLAS);
    opcleer();
    jj_consume_token(COMILLAS);
    jj_consume_token(PAREND);
    jj_consume_token(PUNTOCOMA);
  }

  final public void opcleer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case IDENTIFICADOR1:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR1:
        jj_consume_token(IDENTIFICADOR1);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void declararvar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR1:
      jj_consume_token(IDENTIFICADOR1);
      break;
    case IDENTIFICADOR2:
      jj_consume_token(IDENTIFICADOR2);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLAS:
    case DIGITOS:
    case IDENTIFICADOR1:
      tipodato();
      break;
    case PARENI:
      tuplas();
      break;
    case CORCHI:
      listas();
      break;
    case LLAVEI:
      diccionario();
      break;
    case FALSE:
    case TRUE:
      bool();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PUNTOCOMA);
  }

  final public void tuplas() throws ParseException {
    jj_consume_token(PARENI);
    tipodato();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMA);
      tipodato();
    }
    jj_consume_token(PAREND);
  }

  final public void listas() throws ParseException {
    jj_consume_token(CORCHI);
    tipodato();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMA);
      tipodato();
    }
    jj_consume_token(CORCHD);
  }

  final public void diccionario() throws ParseException {
    jj_consume_token(LLAVEI);
    jj_consume_token(COMILLAS);
    jj_consume_token(IDENTIFICADOR1);
    jj_consume_token(COMILLAS);
    jj_consume_token(DOSPUNTOS);
    tipodato();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMA);
      jj_consume_token(COMILLAS);
      jj_consume_token(IDENTIFICADOR1);
      jj_consume_token(COMILLAS);
      jj_consume_token(DOSPUNTOS);
      tipodato();
    }
    jj_consume_token(LLAVED);
  }

  final public void tipodato() throws ParseException {
    if (jj_2_4(2)) {
      jj_consume_token(IDENTIFICADOR1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITOS:
        jj_consume_token(DIGITOS);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUNTO:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_8;
          }
          jj_consume_token(PUNTO);
          jj_consume_token(DIGITOS);
        }
        break;
      case COMILLAS:
        jj_consume_token(COMILLAS);
        jj_consume_token(IDENTIFICADOR2);
        jj_consume_token(COMILLAS);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignacionaumentada() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR1:
      jj_consume_token(IDENTIFICADOR1);
      break;
    case IDENTIFICADOR2:
      jj_consume_token(IDENTIFICADOR2);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    operasinacionaumen();
    opcasignacionaumentada();
    jj_consume_token(PUNTOCOMA);
  }

  final public void operasinacionaumen() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MASIGUAL:
      jj_consume_token(MASIGUAL);
      break;
    case MENOSIGUAL:
      jj_consume_token(MENOSIGUAL);
      break;
    case DIVIGUAL:
      jj_consume_token(DIVIGUAL);
      break;
    case MULTIGUAL:
      jj_consume_token(MULTIGUAL);
      break;
    case DDIGUAL:
      jj_consume_token(DDIGUAL);
      break;
    case RESIGUAL:
      jj_consume_token(RESIGUAL);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void opcasignacionaumentada() throws ParseException {
    jj_consume_token(IDENTIFICADOR1);
  }

  final public void romper() throws ParseException {
    jj_consume_token(BREAK);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFICADOR1)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFICADOR1)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PythonTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,0x8000000,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,0x0,0x10,0x0,0x5f00,0x5f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0xffffffff,0x70000000,0x0,0x30000000,0x0,0x0,0xc0000000,0xc0000004,0xc0000000,0xc0000000,0xc0000004,0xc0000000,0xc0000004,0xc0000000,0xc0000000,0xc0000004,0xd0000000,0xc0000000,0xc0000000,0x80000000,0xd0000001,0x4,0x4,0x4,0x0,0x50000000,0x0,0x80000000,0x1f80,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Python(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Python(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PythonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Python(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PythonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Python(PythonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PythonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[103];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 103; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
