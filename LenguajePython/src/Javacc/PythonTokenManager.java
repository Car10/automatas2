/* Generated By:JavaCC: Do not edit this line. PythonTokenManager.java */
package javacc;
import java.util.ArrayList;

/** Token Manager. */
public class PythonTokenManager implements PythonConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffeL) != 0L || (active1 & 0xf800000L) != 0L)
         {
            jjmatchedKind = 95;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0x804680060L) != 0L || (active1 & 0x800000L) != 0L)
            return 5;
         if ((active0 & 0xf7fb97ff9eL) != 0L || (active1 & 0xf000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 5;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fb996f3ceL) != 0L || (active1 & 0x9000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
            return 5;
         }
         if ((active0 & 0x8042010c10L) != 0L || (active1 & 0x6800000L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active0 & 0x10802300cL) != 0L || (active1 & 0x8000000L) != 0L)
            return 5;
         if ((active0 & 0x7eb194c3c2L) != 0L || (active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
            return 5;
         }
         return -1;
      case 4:
         if ((active0 & 0x2194c240L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
            return 5;
         }
         if ((active0 & 0x7e90000182L) != 0L || (active1 & 0x1000000L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active0 & 0x1008200L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active0 & 0x20944040L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0x8000L) != 0L)
            return 5;
         if ((active0 & 0x1000200L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
            return 5;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 93);
      case 36:
         return jjStopAtPos(0, 84);
      case 37:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 38:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 40:
         return jjStopAtPos(0, 59);
      case 41:
         return jjStopAtPos(0, 60);
      case 42:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x80400L);
      case 43:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 44:
         return jjStopAtPos(0, 66);
      case 45:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x140L);
      case 46:
         return jjStopAtPos(0, 61);
      case 47:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0xa00L);
      case 58:
         return jjStopAtPos(0, 67);
      case 59:
         return jjStopAtPos(0, 68);
      case 60:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x80800000000000L, 0x40000L);
      case 61:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x101000000000000L, 0x20000L);
      case 63:
         return jjStopAtPos(0, 85);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 91:
         return jjStopAtPos(0, 62);
      case 93:
         return jjStopAtPos(0, 63);
      case 94:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 96:
         return jjStopAtPos(0, 86);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x70L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x4000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000007000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x1000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800780000L, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1008000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x430000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 64);
      case 124:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 125:
         return jjStopAtPos(0, 65);
      case 126:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 47:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 60:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 61:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 62:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x418800002L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000c00L, active1, 0L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 5);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x300008000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x43100L, active1, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000010L, active1, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x3010208L, active1, 0x8000000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0x3040020084L, active1, 0L);
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x2000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(2, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 5);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 5);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000080L, active1, 0L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1090001000L, active1, 0L);
      case 108:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x401008208L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L, active1, 0x9000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 5);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 5);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8002040L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 5);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8080L, active1, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x840000L, active1, 0L);
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 2, 5);
         else if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 5);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x4040L, active1, 0L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 5);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 5);
         break;
      case 108:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x281000000L, active1, 0L);
      case 109:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 5);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000102L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x820000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 1, 5);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 5);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 5);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 107:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 5);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x20100040L, active1, 0L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 5);
         break;
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 5);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 5);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 5);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 5);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 5);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 5);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 5);
         break;
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(3);
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(0);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAdd(1);
                  }
                  break;
               case 5:
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(3);
                  break;
               case 0:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  kind = 92;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(3);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(2);
                  }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(3);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(2);
                  }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\106\141\154\163\145", "\124\162\165\145", "\116\157\156\145", 
"\141\156\144", "\141\163", "\141\163\163\145\162\164", "\142\162\145\141\153", 
"\143\154\141\163\163", "\143\157\156\164\151\156\165\145", "\144\145\146", "\144\145\154", 
"\145\154\151\146", "\145\154\163\145", "\145\170\143\145\160\164", 
"\146\151\156\141\154\154\171", "\146\157\162", "\146\162\157\155", "\147\154\157\142\141\154", "\151\146", 
"\151\155\160\157\162\164", "\151\156", "\151\163", "\154\141\155\142\144\141", 
"\156\157\156\154\157\143\141\154", "\156\157\164", "\157\162", "\160\141\163\163", "\162\141\151\163\145", 
"\162\145\164\165\162\156", "\164\162\171", "\167\150\151\154\145", "\167\151\164\150", 
"\171\151\145\154\144", "\162\141\156\147\145", "\151\156\160\165\164", "\160\162\151\156\164", 
"\145\162\162\157\162", "\123\164\141\162\164", "\105\156\144", "\53", "\55", "\52", "\52\52", "\57", 
"\57\57", "\45", "\74\74", "\76\76", "\46", "\174", "\136", "\176", "\74", "\76", 
"\74\75", "\76\75", "\75\75", "\41\75", "\50", "\51", "\56", "\133", "\135", "\173", 
"\175", "\54", "\72", "\73", "\75", "\55\76", "\53\75", "\55\75", "\57\75", "\52\75", 
"\57\57\75", "\45\75", "\100\75", "\46\75", "\174\75", "\136\75", "\76\76\75", "\74\74\75", 
"\52\52\75", "\44", "\77", "\140", "\151\156\164", "\146\154\157\141\164", "\163\164\162", 
"\143\150\162", "\142\157\157\154", null, "\43", null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1ffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7e00000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[4];
private final int[] jjstateSet = new int[8];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PythonTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PythonTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 4; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003700L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                               System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                            System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                          System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                                  System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                                System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                                System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                                      System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                            System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                            System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                                  System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                                    System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                            System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                                  System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                          System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                                  System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                          System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                          System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                                  System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                                      System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                            System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                          System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                                System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                                  System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                            System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                              System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                                System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                               System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                                System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("Palabra reservada: "+image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                                System.out.println("print: "+image);
        Python.tabletokens.add("palabra reservada: "+image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                                 System.out.println("error: "+image);
        Python.tabletokens.add("error: "+image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                                 System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("error: "+image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                               System.out.println("Palabra reservada: "+image);
        Python.tabletokens.add("error: "+image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                             System.out.println("Operador suma: "+image);
        Python.tabletokens.add("Operador Suma: "+image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                             System.out.println("Operador resta: "+image);
        Python.tabletokens.add("Operador resta: "+image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                             System.out.println("Operador multiplicaci\u00c3\u0192\u00c2\u00b3n: "+image);
        Python.tabletokens.add("Operador multiplicaci\u00c3\u0192\u00c2\u00b3n: "+image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                              System.out.println("Operador potencia: "+image);
        Python.tabletokens.add("Operador potencia: "+image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                             System.out.println("Operador divisi\u00c3\u0192\u00c2\u00b3n: "+image);
        Python.tabletokens.add("Operador divisi\u00c3\u0192\u00c2\u00b3n: "+image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                              System.out.println("Operador divisi\u00c3\u0192\u00c2\u00b3n entera: "+image);
        Python.tabletokens.add("Operador divisi\u00c3\u0192\u00c2\u00b3n entera: "+image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                             System.out.println("Operador de modulo: "+image);
        Python.tabletokens.add("Operador de modulo: "+image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                              System.out.println("Operador binario de desplazamiento izquierdo: "+image);
        Python.tabletokens.add("Operador binario de desplazamiento izquierdo: "+image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                              System.out.println("Operador binario de desplazamiento derecha: "+image);
        Python.tabletokens.add("Operador binario de desplazamiento derecha: "+image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                             System.out.println("Operador and: "+image);
        Python.tabletokens.add("Operador binario and logico: "+image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                     System.out.println("Operador or: "+image);
        Python.tabletokens.add("Operador or: "+image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                             System.out.println("Operador de conjuntos: "+image);
        Python.tabletokens.add("Operador de conjuntos: "+image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                             System.out.println("Operador not: "+image);
        Python.tabletokens.add("Operador not: "+image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                             System.out.println("Operador menor que: "+image);
        Python.tabletokens.add("Operador menor que: "+image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                             System.out.println("Operador mayor que: "+image);
        Python.tabletokens.add("Operador mayor que: "+image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                              System.out.println("Operador menor que con asignaci\u00c3\u0192\u00c2\u00b3n: "+image);
        Python.tabletokens.add("Operador menor que ocn asignaci\u00c3\u0192\u00c2\u00b3n: "+image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                              System.out.println("Operador mayor que con asignaci\u00c3\u0192\u00c2\u00b3: "+image);
        Python.tabletokens.add("Operador mayor que con asignaci\u00c3\u0192\u00c2\u00b3n: "+image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                              System.out.println("Operador de comparaci\u00c3\u0192\u00c2\u00b3n: "+image);
        Python.tabletokens.add("Operador de comparaci\u00c3\u0192\u00c2\u00b3n: "+image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                              System.out.println("Operador de negaci\u00c3\u0192\u00c2\u00b3n con asignaci\u00c3\u0192\u00c2\u00b3n: "+image);
        Python.tabletokens.add("Operador de negaci\u00c3\u0192\u00c2\u00b3n con asignaci\u00c3\u0192\u00c2\u00b3n: "+image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                            System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                            System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                             System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                              System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                              System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                                System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                               System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                                System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                                System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                                System.out.println("Delimitador: "+image);
        Python.tabletokens.add("Delimitador: "+image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                             System.out.println("Palabra no aceptada por el lenguaje: "+image);
        Python.tabletokens.add("Inicio/Final de cadenas de caracteres: "+image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                              System.out.println("Palabra no aceptada por el lenguaje: "+image);
        Python.tabletokens.add("Inicio/Final de cadenas de caracteres: "+image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                               System.out.println("Palabra no aceptada por el lenguaje: "+image);
        Python.tabletokens.add("Inicio/Final de cadenas de caracteres: "+image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                                  System.out.println("Tipo de dato entero: "+image);
        Python.tabletokens.add("Tipo de dato entero: "+image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                                    System.out.println("Tipo de dato flotante: "+image);
        Python.tabletokens.add("Tipo de dato flotante: "+image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                                  System.out.println("Tipo de dato cadena: "+image);
        Python.tabletokens.add("Tipo de dato cadena: "+image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                                  System.out.println("Tipo de dato caracter: "+image);
        Python.tabletokens.add("Tipo de dato caracter: "+image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                                   System.out.println("Tipo de dato boleano: "+image);
        Python.tabletokens.add("Tipo de dato boleano: "+image);
         break;
      case 92 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         System.out.println("Inicio/final de cadenas de caracteres o comentarios: "+image);
        Python.tabletokens.add("Inicio/Final de cadenas de caracteres: "+image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                                 System.out.println("Inicio de un comentario: "+image);
        Python.tabletokens.add("Inicio/Final de cadenas de caracteres: "+image);
         break;
      case 94 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        System.out.println("Digitos: "+image+"\u005cr\u005cn");
        Python.tabletokens.add("Digitos: "+image);
         break;
      case 95 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                         System.out.println("Identificadores "+image);
        Python.tabletokens.add("Identificadores: "+image);
         break;
      case 96 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                     System.out.println("Identificadores "+image);
        Python.tabletokens.add("Identificadores: "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
